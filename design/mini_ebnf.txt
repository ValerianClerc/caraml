# Source inspiration (with modifications): https://esumii.github.io/min-caml/index-e.html

program ::=
        ((exp | decl);)+

decl ::= fun IDENT (x1: t1, x2: t2, ... xn: tn) = exp3

exp  ::= logical_or_exp
        | if exp1 then exp2 else exp3
        | let IDENT = exp1 in exp2

logical_or_exp ::= logical_and_exp { "||" logical_and_exp }

logical_and_exp ::= equality_exp { "&&" equality_exp }

equality_exp ::= relational_exp { ("!=" | "==") relational_exp }

relational_exp ::= additive_exp { ("<" | ">" | "<=" | ">=") additive_exp }

additive_exp ::= term { ("+" | "-") term }

term ::= factor { ("*" | "/") factor }

factor ::= "(" exp ")"
        | unary_op factor
        | IDENT     # variable expression
        | STRING
        | INT
        | CHAR
        | BOOL
        | x(e1, ... en)

unary_op ::= "!" | "+" | "-"

T ::= types
        π   # primitive types
        T1 -> ... -> Tn -> T    # function types
        T1 * ... * Tn           # tuple types
        α                       # type variables (for type inference)
