# Source inspiration (with modifications): https://esumii.github.io/min-caml/index-e.html

program ::=
        (e;)+

e ::=   expressions
        c                   # constants (int, string, or boolean)
        e1 op e2            # binary operators (+, -, *, /, =, <>, <, >, <=, >=)
        if e1 then e2 else e3   # conditional branches
        let x = e1 in e2    # variable definitions
        x                   # variables (identifier x)
        fun x (y1, y2, ... yn) = e1 in e2      # function definitions
        x(e1 ... en)         # function applications
        (e1, ..., en)       # tuple creations
        let (x1, ..., xn) = e1 in e2    # read from tuples

T ::= types
        π   # primitive types
        T1 -> ... -> Tn -> T    # function types
        T1 * ... * Tn           # tuple types
        α                       # type variables (for type inference)
