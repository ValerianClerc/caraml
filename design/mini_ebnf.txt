# Source inspiration (with modifications): https://esumii.github.io/min-caml/index-e.html

program ::=
        (e;)+

e ::=   expressions
        c e'                   # constants (int, string, or boolean)
        if e1 then e2 else e3 e'   # conditional branches
        let x = e1            # variable definitions
        x e'                  # variables (identifier x)
        fun x (y1: t1, y2: t2, ... yn: tn) = e e'     # function definitions
        x(e1 ... en) e'        # function applications

        # Will add these later:
        # (e1, ..., en)       # tuple creations
        # let (x1, ..., xn) = e1 in e2    # read from tuples

e' ::=  op e2            # binary operators (+, -, *, /, =, <>, <, >, <=, >=)
        E           # empty

T ::= types
        π   # primitive types
        T1 -> ... -> Tn -> T    # function types
        T1 * ... * Tn           # tuple types
        α                       # type variables (for type inference)
